package com.totemsoft.screenlookcount.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.totemsoft.screenlookcount.db.DayLook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_LOOK".
*/
public class DayLookDao extends AbstractDao<DayLook, Long> {

    public static final String TABLENAME = "DAY_LOOK";

    /**
     * Properties of entity DayLook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Screenon = new Property(2, Integer.class, "screenon", false, "SCREENON");
        public final static Property Screenoff = new Property(3, Integer.class, "screenoff", false, "SCREENOFF");
        public final static Property Screenunlock = new Property(4, Integer.class, "screenunlock", false, "SCREENUNLOCK");
    };


    public DayLookDao(DaoConfig config) {
        super(config);
    }
    
    public DayLookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_LOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT NOT NULL ," + // 1: date
                "\"SCREENON\" INTEGER," + // 2: screenon
                "\"SCREENOFF\" INTEGER," + // 3: screenoff
                "\"SCREENUNLOCK\" INTEGER);"); // 4: screenunlock
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_LOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DayLook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDate());
 
        Integer screenon = entity.getScreenon();
        if (screenon != null) {
            stmt.bindLong(3, screenon);
        }
 
        Integer screenoff = entity.getScreenoff();
        if (screenoff != null) {
            stmt.bindLong(4, screenoff);
        }
 
        Integer screenunlock = entity.getScreenunlock();
        if (screenunlock != null) {
            stmt.bindLong(5, screenunlock);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DayLook readEntity(Cursor cursor, int offset) {
        DayLook entity = new DayLook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // screenon
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // screenoff
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // screenunlock
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DayLook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getString(offset + 1));
        entity.setScreenon(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setScreenoff(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setScreenunlock(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DayLook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DayLook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
